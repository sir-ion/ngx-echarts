(self.webpackChunkngx_echarts_demo=self.webpackChunkngx_echarts_demo||[]).push([[981],{4981:(d,r,o)=>{"use strict";o.r(r),o.d(r,{DemoAdvancedModule:()=>L});var c=o(6019),g=o(3705),C=o(4785),u=o(8223),n=o(3668),T=o(3109),f=o(7407),Z=o(2660),y=o(2953),v=o(7217),D=o(2585),b=o(6115);let z=(()=>{class t{constructor(){this.html=o(6479),this.component=o(6609).Z,this.options={color:["#3398DB"],tooltip:{trigger:"axis",axisPointer:{type:"shadow"}},grid:{left:"3%",right:"4%",bottom:"3%",containLabel:!0},xAxis:[{type:"category",data:["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],axisTick:{alignWithLabel:!0}}],yAxis:[{type:"value"}],series:[{name:"Counters",type:"bar",barWidth:"60%",data:[10,52,200,334,390,330,220]}]}}ngAfterViewInit(){setTimeout(()=>{const e=document.getElementById("chart1"),i=document.getElementById("chart2"),h=(0,v.getInstanceByDom)(e),p=(0,v.getInstanceByDom)(i);(0,v.connect)([h,p])})}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=n.Xpm({type:t,selectors:[["app-connect-charts"]],decls:10,vars:4,consts:[["nz-row",""],["nz-col","","nzSpan","12"],["id","chart1","echarts","","theme","macarons",1,"demo-chart",3,"options"],["id","chart2","echarts","","theme","macarons",1,"demo-chart",3,"options"],[3,"html","component"]],template:function(e,i){1&e&&(n.TgZ(0,"div",0),n.TgZ(1,"div",1),n.TgZ(2,"h5"),n._uU(3," id=chart1 "),n.qZA(),n._UZ(4,"div",2),n.qZA(),n.TgZ(5,"div",1),n.TgZ(6,"h5"),n._uU(7," id=chart2 "),n.qZA(),n._UZ(8,"div",3),n.qZA(),n.qZA(),n._UZ(9,"code-block",4)),2&e&&(n.xp6(4),n.Q6J("options",i.options),n.xp6(4),n.Q6J("options",i.options),n.xp6(1),n.Q6J("html",i.html)("component",i.component))},directives:[D.SK,D.t3,g._w,b.P],styles:[""]}),t})();var m=o(284);const l=[[15,0],[-50,10],[-56.5,20],[-46.5,30],[-22.1,40]];let E=(()=>{class t{constructor(){this.html=o(5652),this.component=o(7203).Z,this.options={title:{text:"Try Dragging these Points"},tooltip:{triggerOn:"none",formatter:e=>"X: "+e.data[0].toFixed(2)+"<br>Y: "+e.data[1].toFixed(2)},grid:{},xAxis:{min:-100,max:80,type:"value",axisLine:{onZero:!1}},yAxis:{min:-30,max:60,type:"value",axisLine:{onZero:!1}},dataZoom:[{type:"slider",xAxisIndex:0,filterMode:"empty"},{type:"slider",yAxisIndex:0,filterMode:"empty"},{type:"inside",xAxisIndex:0,filterMode:"empty"},{type:"inside",yAxisIndex:0,filterMode:"empty"}],series:[{id:"a",type:"line",smooth:!0,symbolSize:20,data:l}]}}ngOnDestroy(){this.updatePosition&&window.removeEventListener("resize",this.updatePosition)}onChartReady(e){const i=function(s){l[s]=e.convertFromPixel({gridIndex:0},this.position),e.setOption({series:[{id:"a",data:l}]})},h=s=>{e.dispatchAction({type:"showTip",seriesIndex:0,dataIndex:s})},p=()=>{e.dispatchAction({type:"hideTip"})},x=()=>{e.setOption({graphic:m.map(l,s=>({position:e.convertToPixel({gridIndex:0},s)}))})};window.addEventListener("resize",x),e.on("dataZoom",x),this.updatePosition=x,setTimeout(()=>{e.setOption({graphic:m.map(l,(s,A)=>({type:"circle",position:e.convertToPixel({gridIndex:0},s),shape:{cx:0,cy:0,r:10},invisible:!0,draggable:!0,ondrag:m.curry(i,A),onmousemove:m.curry(h,A),onmouseout:m.curry(p,A),z:100}))})},0)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=n.Xpm({type:t,selectors:[["app-line-draggable"]],decls:2,vars:3,consts:[["echarts","",2,"height","600px",3,"options","chartInit"],[3,"html","component"]],template:function(e,i){1&e&&(n.TgZ(0,"div",0),n.NdJ("chartInit",function(p){return i.onChartReady(p)}),n.qZA(),n._UZ(1,"code-block",1)),2&e&&(n.Q6J("options",i.options),n.xp6(1),n.Q6J("html",i.html)("component",i.component))},directives:[g._w,b.P],styles:[""]}),t})();function O(t,a){1&t&&n._UZ(0,"app-connect-charts")}function P(t,a){1&t&&n._UZ(0,"app-line-draggable")}const M=[{path:"",redirectTo:"advanced-usage",pathMatch:"full"},{path:"advanced-usage",component:(()=>{class t{constructor(){}ngOnInit(){}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=n.Xpm({type:t,selectors:[["app-advanced"]],decls:13,vars:1,consts:[["nzTitle","Advanced"],["nz-page-header-breadcrumb",""],["routerLink","/welcome"],[2,"margin-top","8px",3,"nzTabPosition"],["nzTitle","Connect Charts"],["nz-tab",""],["nzTitle","Draggable Chart"]],template:function(e,i){1&e&&(n.TgZ(0,"nz-page-header",0),n.TgZ(1,"nz-breadcrumb",1),n.TgZ(2,"nz-breadcrumb-item"),n.TgZ(3,"a",2),n._uU(4,"Home"),n.qZA(),n.qZA(),n.TgZ(5,"nz-breadcrumb-item"),n._uU(6,"Advanced"),n.qZA(),n.qZA(),n.qZA(),n._UZ(7,"nz-divider"),n.TgZ(8,"nz-tabset",3),n.TgZ(9,"nz-tab",4),n.YNc(10,O,1,0,"ng-template",5),n.qZA(),n.TgZ(11,"nz-tab",6),n.YNc(12,P,1,0,"ng-template",5),n.qZA(),n.qZA()),2&e&&(n.xp6(8),n.Q6J("nzTabPosition","left"))},directives:[T.$O,f.Dg,T.A2,f.MO,u.yS,Z.g,y.xH,y.xw,y.cj,z,E],styles:[""]}),t})()}];let S=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275mod=n.oAB({type:t}),t.\u0275inj=n.cJS({imports:[[u.Bz.forChild(M)],u.Bz]}),t})(),L=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275mod=n.oAB({type:t}),t.\u0275inj=n.cJS({imports:[[c.ez,C.m,g.Ns,S]]}),t})()},6479:d=>{d.exports='\x3c!-- DEMO START --\x3e\n<div nz-row>\n  <div nz-col nzSpan="12">\n    <h5> id=chart1 </h5>\n    <div id="chart1" echarts [options]="options" theme="macarons" class="demo-chart"></div>\n  </div>\n  <div nz-col nzSpan="12">\n    <h5> id=chart2 </h5>\n    <div id="chart2" echarts [options]="options" theme="macarons" class="demo-chart"></div>\n  </div>\n</div>\n\x3c!-- DEMO END --\x3e\n\n<code-block\n  [html]="html"\n  [component]="component">\n</code-block>'},5652:d=>{d.exports='\x3c!-- DEMO START --\x3e\n<div echarts (chartInit)="onChartReady($event)" [options]="options" style="height: 600px;"></div>\n\x3c!-- DEMO END --\x3e\n\n<code-block\n  [html]="html"\n  [component]="component">\n</code-block>'},6609:(d,r,o)=>{"use strict";o.d(r,{Z:()=>c});const c="import { Component, AfterViewInit } from '@angular/core';\nimport { getInstanceByDom, connect } from 'echarts';\ndeclare const require: any; // DEMO IGNORE\n\n@Component({\n  selector: 'app-connect-charts',\n  templateUrl: './connect-charts.component.html',\n  styleUrls: ['./connect-charts.component.scss'],\n})\nexport class ConnectChartsComponent implements AfterViewInit {\n  html = require('!!html-loader?-minimize!./connect-charts.component.html'); // DEMO IGNORE\n  component = require('!!raw-loader!./connect-charts.component.ts').default; // DEMO IGNORE\n  options = {\n    color: ['#3398DB'],\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'shadow',\n      },\n    },\n    grid: {\n      left: '3%',\n      right: '4%',\n      bottom: '3%',\n      containLabel: true,\n    },\n    xAxis: [\n      {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n        axisTick: {\n          alignWithLabel: true,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n      },\n    ],\n    series: [\n      {\n        name: 'Counters',\n        type: 'bar',\n        barWidth: '60%',\n        data: [10, 52, 200, 334, 390, 330, 220],\n      },\n    ],\n  };\n  constructor() {}\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      const chartElement1 = document.getElementById('chart1');\n      const chartElement2 = document.getElementById('chart2');\n      const chart1 = getInstanceByDom(chartElement1);\n      const chart2 = getInstanceByDom(chartElement2);\n      connect([chart1, chart2]);\n    });\n  }\n}\n"},7203:(d,r,o)=>{"use strict";o.d(r,{Z:()=>c});const c="import { Component, OnDestroy } from '@angular/core';\nimport * as util from 'zrender/lib/core/util';\n\ndeclare const require: any; // DEMO IGNORE\n\nconst SymbolSize = 20;\nconst Data = [\n  [15, 0],\n  [-50, 10],\n  [-56.5, 20],\n  [-46.5, 30],\n  [-22.1, 40],\n];\n\n@Component({\n  selector: 'app-line-draggable',\n  templateUrl: './line-draggable.component.html',\n  styleUrls: ['./line-draggable.component.scss'],\n})\nexport class LineDraggableComponent implements OnDestroy {\n  html = require('!!html-loader?-minimize!./line-draggable.component.html'); // DEMO IGNORE\n  component = require('!!raw-loader!./line-draggable.component.ts').default; // DEMO IGNORE\n  updatePosition: () => void;\n  options = {\n    title: {\n      text: 'Try Dragging these Points',\n    },\n    tooltip: {\n      triggerOn: 'none',\n      formatter: (params) =>\n        'X: ' + params.data[0].toFixed(2) + '<br>Y: ' + params.data[1].toFixed(2),\n    },\n    grid: {},\n    xAxis: {\n      min: -100,\n      max: 80,\n      type: 'value',\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: 'value',\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: 'slider',\n        xAxisIndex: 0,\n        filterMode: 'empty',\n      },\n      {\n        type: 'slider',\n        yAxisIndex: 0,\n        filterMode: 'empty',\n      },\n      {\n        type: 'inside',\n        xAxisIndex: 0,\n        filterMode: 'empty',\n      },\n      {\n        type: 'inside',\n        yAxisIndex: 0,\n        filterMode: 'empty',\n      },\n    ],\n    series: [\n      {\n        id: 'a',\n        type: 'line',\n        smooth: true,\n        symbolSize: SymbolSize,\n        data: Data,\n      },\n    ],\n  };\n  constructor() {}\n\n  ngOnDestroy() {\n    if (this.updatePosition) {\n      window.removeEventListener('resize', this.updatePosition);\n    }\n  }\n\n  onChartReady(myChart: any) {\n    const onPointDragging = function(dataIndex) {\n      Data[dataIndex] = myChart.convertFromPixel({ gridIndex: 0 }, this.position) as number[];\n\n      // Update data\n      myChart.setOption({\n        series: [\n          {\n            id: 'a',\n            data: Data,\n          },\n        ],\n      });\n    };\n\n    const showTooltip = (dataIndex) => {\n      myChart.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex,\n      });\n    };\n\n    const hideTooltip = () => {\n      myChart.dispatchAction({\n        type: 'hideTip',\n      });\n    };\n\n    const updatePosition = () => {\n      myChart.setOption({\n        graphic: util.map(Data, (item) => ({\n          position: myChart.convertToPixel({ gridIndex: 0 }, item),\n        })),\n      });\n    };\n\n    window.addEventListener('resize', updatePosition);\n    myChart.on('dataZoom', updatePosition);\n\n    // save handler and remove it on destroy\n    this.updatePosition = updatePosition;\n\n    setTimeout(() => {\n      myChart.setOption({\n        graphic: util.map(Data, (item, dataIndex) => {\n          return {\n            type: 'circle',\n            position: myChart.convertToPixel({ gridIndex: 0 }, item),\n            shape: {\n              cx: 0,\n              cy: 0,\n              r: SymbolSize / 2,\n            },\n            invisible: true,\n            draggable: true,\n            ondrag: util.curry<(dataIndex: any) => void, number>(onPointDragging, dataIndex),\n            onmousemove: util.curry<(dataIndex: any) => void, number>(showTooltip, dataIndex),\n            onmouseout: util.curry<(dataIndex: any) => void, number>(hideTooltip, dataIndex),\n            z: 100,\n          };\n        }),\n      });\n    }, 0);\n  }\n}\n"}}]);